using Microsoft.AspNetCore.Mvc;
using System.Text;
using System.Text.Json;
using backup_website.Models.Requests; // ‚úÖ ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ Model ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å Frontend

namespace backup_website.Controllers
{
    public class BackupWebsiteController : Controller
    {
        private readonly ApiService _apiService;  // ‚úÖ ‡πÉ‡∏ä‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API Service ‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Database
        private readonly IConfiguration _configuration;  // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏à‡∏≤‡∏Å `appsettings.json`
        private readonly HttpClient _httpClient;  // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≥ HTTP Request
        private readonly string _BaseUrlUrud;  // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö Base URL ‡∏Ç‡∏≠‡∏á API
        private readonly string _apiToken;  // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö API Token

        public BackupWebsiteController(ApiService apiService, IConfiguration configuration, HttpClient httpClient)
        {
            _apiService = apiService;
            _configuration = configuration;
            _httpClient = httpClient;

            // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤ API URL ‡πÅ‡∏•‡∏∞ Token ‡∏à‡∏≤‡∏Å `appsettings.json`
            _BaseUrlUrud = _configuration["ApiSettings:BaseUrlUrud"] ?? throw new ArgumentNullException(nameof(_BaseUrlUrud), "API URL not found in appsettings.json");
            _apiToken = _configuration["ApiSettings:SansiriApiToken"] ?? throw new ArgumentNullException(nameof(_apiToken), "API Token not found in appsettings.json");
        }

        /// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å `get-tb-sansiri-url-log`
        public async Task<IActionResult> DownloadHistory()
        {
            var data = await _apiService.GetDataAsync(); // ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Service ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            return View(data); // ‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏ô View
        }

        /// ‚úÖ ‡∏î‡∏∂‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å `get-tb-sansiri-url`
        public async Task<IActionResult> DownloadLinks()
        {
            var sansiriUrls = await _apiService.GetSansiriUrlsAsync(); // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• URL ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            var categories = await _apiService.GetTableUrlCategory(); // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á URL

            // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Dictionary ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö mapping id_category_url -> name
            var categoryDict = categories.ToDictionary(c => c.id_category_url, c => c.name ?? "Unknown");

            // ‚úÖ ‡πÉ‡∏™‡πà category_name ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô sansiriUrls ‡πÇ‡∏î‡∏¢‡∏î‡∏π‡∏à‡∏≤‡∏Å id_category_url
            foreach (var item in sansiriUrls)
            {
                item.category_name = item.id_category_url.HasValue && categoryDict.ContainsKey(item.id_category_url.Value)
                    ? categoryDict[item.id_category_url.Value]
                    : "Unknown";
            }

            return View(sansiriUrls); // ‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏ô View
        }

        /// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á Update ‡πÅ‡∏•‡∏∞ Delete
        private async Task<IActionResult> SendPutRequest(object requestData)
        {
            var apiUrl = $"{_BaseUrlUrud}put-tb-sansiri-url"; // ‚úÖ ‡∏£‡∏ß‡∏° Base URL + Endpoint API

            var json = JsonSerializer.Serialize(requestData); // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á object ‡πÄ‡∏õ‡πá‡∏ô JSON
            var content = new StringContent(json, Encoding.UTF8, "application/json"); // ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Content-Type ‡πÄ‡∏õ‡πá‡∏ô JSON

            _httpClient.DefaultRequestHeaders.Clear(); // ‚úÖ ‡∏•‡πâ‡∏≤‡∏á Header ‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏™‡πà‡πÉ‡∏´‡∏°‡πà
            _httpClient.DefaultRequestHeaders.Add("token", _apiToken); // ‚úÖ ‡πÉ‡∏™‡πà API Token ‡πÉ‡∏ô Header

            var response = await _httpClient.PutAsync(apiUrl, content); // ‚úÖ ‡∏™‡πà‡∏á HTTP PUT Request ‡πÑ‡∏õ‡∏¢‡∏±‡∏á API
            var responseText = await response.Content.ReadAsStringAsync(); // ‚úÖ ‡∏≠‡πà‡∏≤‡∏ô Response ‡∏à‡∏≤‡∏Å API

            return response.IsSuccessStatusCode
                ? Json(new { success = true }) // ‚úÖ ‡∏™‡πà‡∏á Response ‡∏Å‡∏•‡∏±‡∏ö‡∏ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                : Json(new { success = false, error = responseText }); // ‚úÖ ‡∏™‡πà‡∏á Error ‡∏Å‡∏•‡∏±‡∏ö‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        }

        /// ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á URL (‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î) ‡πÇ‡∏î‡∏¢‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ `url_id` ‡πÅ‡∏•‡∏∞ `is_active`
        [HttpPost]
        public async Task<IActionResult> UpdateStatus(int url_id, bool is_active)
        {
            var requestData = new
            {
                url_id = url_id,
                is_active = is_active ? 1 : 0 // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô 1 (‡πÄ‡∏õ‡∏¥‡∏î) ‡∏´‡∏£‡∏∑‡∏≠ 0 (‡∏õ‡∏¥‡∏î)
            };

            return await SendPutRequest(requestData); // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏•‡∏≤‡∏á SendPutRequest
        }

        /// ‚úÖ ‡∏•‡∏ö URL ‡πÇ‡∏î‡∏¢‡∏™‡πà‡∏á `is_delete = 1`
        [HttpPost]
        public async Task<IActionResult> DeleteUrl(int url_id)
        {
            var requestData = new
            {
                url_id = url_id,
                is_delete = 1 // ‚úÖ ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤ is_delete ‡πÄ‡∏õ‡πá‡∏ô 1 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏•‡∏ö
            };

            return await SendPutRequest(requestData); // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏•‡∏≤‡∏á SendPutRequest
        }

        /// ‚úÖ ‡∏î‡∏∂‡∏á Categories ‡∏°‡∏≤‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô Dropdown
        [HttpGet]
        public async Task<IActionResult> GetCategories()
        {
            var categories = await _apiService.GetTableUrlCategory(); // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Categories
            return Json(new { success = true, data = categories }); // ‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Categories ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô JSON
        }

        /// ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï URL ‡πÇ‡∏î‡∏¢‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å Modal (‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç)
        [HttpPost]
        public async Task<IActionResult> UpdateUrl([FromBody] UpdateUrlRequest request)
        {
            // ‚úÖ Debug Log ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å Frontend
            Console.WriteLine($"üìå Debug - ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å Frontend: {JsonSerializer.Serialize(request)}");

            // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
            if (request == null || string.IsNullOrEmpty(request.url) || request.id_category_url == null)
            {
                return Json(new { success = false, error = "Invalid input data" });
            }

            // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á `bool?` ‡πÄ‡∏õ‡πá‡∏ô `int?` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ `0` ‡πÅ‡∏•‡∏∞ `1`
            var requestData = new
            {
                url_id = request.url_id,
                url = request.url,
                url_thankyou = request.url_thankyou ?? "",
                id_category_url = request.id_category_url,
                is_active = request.is_active.HasValue ? Convert.ToInt32(request.is_active.Value) : 1 // ‚úÖ ‡πÉ‡∏ä‡πâ Convert.ToInt32()
            };

            // ‚úÖ Debug Log ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÑ‡∏õ API
            Console.WriteLine($"üìå Debug - requestData ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á‡πÑ‡∏õ API: {JsonSerializer.Serialize(requestData)}");

            return await SendPutRequest(requestData);
        }

        private async Task<IActionResult> SendPostRequest(object requestData)
        {
            var apiUrl = $"{_BaseUrlUrud}post-tb-sansiri-url"; // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô API `POST`

            var json = JsonSerializer.Serialize(requestData);
            var content = new StringContent(json, Encoding.UTF8, "application/json");

            _httpClient.DefaultRequestHeaders.Clear();
            _httpClient.DefaultRequestHeaders.Add("token", _apiToken);

            var response = await _httpClient.PostAsync(apiUrl, content);
            var responseText = await response.Content.ReadAsStringAsync();

            return response.IsSuccessStatusCode
                ? Json(new { success = true })
                : Json(new { success = false, error = responseText });
        }


        public async Task<IActionResult> AddNewLink([FromBody] AddUrlRequest request)
        {
            if (request == null || string.IsNullOrEmpty(request.url) || request.id_category_url == null)
            {
                return Json(new { success = false, error = "Invalid input data" });
            }

            var requestData = new
            {
                url = request.url,
                url_thankyou = request.url_thankyou ?? "",
                id_category_url = request.id_category_url,
                is_active = 1, // ‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
            };

            return await SendPostRequest(requestData);

        }


    }
}
